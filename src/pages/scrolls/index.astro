---
import BaseLayout from '../../layouts/BaseLayout.astro';
// import { SITE_TITLE } from '../../consts';
// import Search from "astro-pagefind/components/Search";
// import Debug from "astro-pagefind/components/Debug";
---
<!-- <Debug {plainText} /> -->

<BaseLayout title="Database">
    <div class="archive-page page">
        <div class="search-page">
            <h1>Medieval Scrolls Database</h1>
            <div class="search-container">
                <div class="filters-column">
                    <div id="filters">
                        <div id="date_start_filter"></div>
                        <div id="date_end_filter"></div>
                        <div id="language_filter"></div>
                        <div id="repository_filter"></div>
                        <div id="type_filter"></div>
                    </div>
                </div>
                <div class="main-content">
                    <div id="search"></div>
                    <div id="results"></div>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>
<!-- <link href="/scrolls-astro/pagefind/pagefind-ui.css" rel="stylesheet">
<script src="/scrolls-astro/pagefind/pagefind-ui.js" is:inline></script> -->
<link href="/scrolls-astro/pagefind/pagefind-modular-ui.css" rel="stylesheet">
<script src="/scrolls-astro/pagefind/pagefind-modular-ui.js" is:inline></script>

<script>
    import { SortedCountPills } from "../../components/pagefind/sortedCountPills";
    document.body.classList.add("archive-search", "grid", "primary");
    window.addEventListener('DOMContentLoaded', (event) => {
        const instance = new PagefindModularUI.Instance();
        instance.add(new PagefindModularUI.Input({
            containerElement: "#search"
        }));
        instance.add(new PagefindModularUI.ResultList({
            containerElement: "#results",
            resultTemplate: (result) => {
                console.log(result);
                return `
                    <li class="search-result search-result-row">
                        <div class="result-field result-title">
                            <a class="pagefind-modular-list-link" href="${result.url}"><h2 class="meta type">${result.meta.title}</h2></a>
                        </div>
                        <div class="result-field result-description">
                            <div class="result-meta">
                                <div><span>Date: ${result.meta.date}</span></div>
                                <div><span>Type: ${result.meta.type}</span></div>
                                <div><span>Language: ${result.meta.language}</span></div>
                            </div>
                            <div class="result-text">${result.excerpt}</div>
                        </div>
                    </li>
                `;
            },
        }));
        const filtersConfig = [
            { container: "#date_end_filter", filter: "date_end" },
            { container: "#date_start_filter", filter: "date_start" },
            { container: "#language_filter", filter: "language" },
            { container: "#repository_filter", filter: "repository" },
            { container: "#type_filter", filter: "type" }
        ];

        filtersConfig.forEach(config => {
            instance.add(new SortedCountPills({
                containerElement: config.container,
                filter: config.filter,
                selectMultiple: true
            }));
        });

        instance.triggerSearch(null);

        // instance.on("filters", (filters) => {
        //     console.log(filters);
        //     filtersConfig.forEach(config => {
        //         const availableFilters = filters.available[config.filter];
        //         console.log("availableFilters", availableFilters)
        //         if (availableFilters) {
        //             // Convert the filter object to an array of {value, count} pairs
        //             const filterArray = Object.keys(availableFilters).map(key => ({
        //                 value: key,
        //                 count: availableFilters[key]
        //             }));
        //             // Sort the array by count in descending order
        //             filterArray.sort((a, b) => b.count - a.count);
        //             // Extract the sorted values
        //             const sortedValues = filterArray.map(item => item.value);
        //             // Add the FilterPills component with the sorted order
        //             instance.add(new PagefindModularUI.FilterPills({
        //                 containerElement: config.container,
        //                 filter: config.filter,
        //                 selectMultiple: true,
        //                 ordering: sortedValues
        //             }));
        //         }
        //     });
        // });
    });
</script>

<!-- <script type="module">
    document.body.classList.add("archive-search", "grid", "primary");
    window.addEventListener('DOMContentLoaded', (event) => {
        let search = new PagefindUI({
            element: "#search",
            pageSize: 25,
            showImages: false,
            showEmptyFilters: false,
            // resetStyles: false
        });

        // pageFind resetStyles looks weird; we can't style a result directly without it;
        // we can't apply styles directly because the elements don't exist until the search is run.
        // Instead we'll use a MutationObserver to apply styles to the results after they're created.
        // Create a new MutationObserver instance
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach(function(node) {
                        // Check if the added node has the class 'pagefind-ui__result'
                        if (node.classList && node.classList.contains('pagefind-ui__result')) {
                            node.style.overflowWrap = 'anywhere';
                        }
                    });
                }
            });
        });

        // Configuration of the observer:
        var config = { childList: true, subtree: true };

        // Start observing the body for added nodes
        observer.observe(document.body, config);

    });
</script> -->

<style>
    .search-page {
        min-height: 500px;
        padding: 100px;
    }

    #search {
        margin-top: 60px;
        margin-bottom: 20px;
    }

    .search-container {
        display: flex;
        flex-wrap: nowrap;
    }

    .filters-column {
        flex: 1;
        max-width: 25%;
        padding-right: 20px;
    }

    .main-content {
        flex: 2;
        max-width: 75%;
    }

    #results {
        margin-top: 20px;
    }
</style>